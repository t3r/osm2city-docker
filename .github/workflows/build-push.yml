name: Build and Push the image

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push arm64
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${ECR_REGISTRY}/cloudcity:${IMAGE_TAG}-arm64 -t torstend/osm2city:${IMAGE_TAG}-arm64 --platform linux/arm64 .
          docker push torstend/osm2city:${IMAGE_TAG}-arm64
          docker push ${ECR_REGISTRY}/cloudcity:${IMAGE_TAG}-arm64

      - name: Build and push amd64
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${ECR_REGISTRY}/cloudcity:${IMAGE_TAG}-amd64 -t torstend/osm2city:${IMAGE_TAG}-amd64 --platform linux/amd64 .
          docker push torstend/osm2city:${IMAGE_TAG}-amd64
          #docker push ${ECR_REGISTRY}/cloudcity:${IMAGE_TAG}-amd64
